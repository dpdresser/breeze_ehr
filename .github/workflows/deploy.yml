name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RUST_VERSION: 1.88

jobs:
  # Continuous Integration
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests (no database)
      run: cargo test --lib

    - name: Build release binary
      run: cargo build --release

  # Build and deploy (only on main branch)
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Copy Caddyfile to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PW }}
        source: "Caddyfile.prod"
        target: "/var/www/breezeehr/"

    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PW }}
        script: |
          # Create app directory and set permissions
          mkdir -p /var/www/breezeehr
          mkdir -p /var/log/caddy
          chmod 755 /var/www/breezeehr
          chmod 755 /var/log/caddy
          cd /var/www/breezeehr
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker pull ghcr.io/${{ github.repository }}:main
          
          # Create backup of current deployment
          if [ -f docker-compose.prod.yml ]; then
            cp docker-compose.prod.yml docker-compose.prod.yml.backup
          fi
          
          # Stop existing containers gracefully
          docker compose -f docker-compose.prod.yml down --timeout 30 || true
          
          # Create docker-compose file
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            breezeehr:
              image: ghcr.io/${{ github.repository }}:main
              restart: unless-stopped
              expose:
                - "3000"
              environment:
                - APP_HOST=0.0.0.0
                - APP_PORT=3000
                - RUST_LOG=info
                - SUPABASE_URL=${{ secrets.SUPABASE_URL_PROD }}
                - SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}
                - SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY_PROD }}
                - SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET_PROD }}
                - SUPABASE_DB_URL=${{ secrets.SUPABASE_DB_URL_PROD }}
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              networks:
                - app-network
            
            caddy:
              image: caddy:2-alpine
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./Caddyfile.prod:/etc/caddy/Caddyfile:ro
                - caddy_data:/data
                - caddy_config:/config
                - /var/log/caddy:/var/log/caddy
              networks:
                - app-network
              depends_on:
                breezeehr:
                  condition: service_healthy

          volumes:
            caddy_data:
            caddy_config:

          networks:
            app-network:
              driver: bridge
          EOF
          
          # Start services
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if services are running
          if ! docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "Services failed to start, rolling back..."
            docker compose -f docker-compose.prod.yml down
            if [ -f docker-compose.prod.yml.backup ]; then
              mv docker-compose.prod.yml.backup docker-compose.prod.yml
              docker compose -f docker-compose.prod.yml up -d
            fi
            exit 1
          fi
          
          # Show status
          docker compose -f docker-compose.prod.yml ps
          
          # Clean up
          docker image prune -f
          rm -f docker-compose.prod.yml.backup
          
          echo "✅ Deployment successful!"

    - name: Run smoke tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PW }}
        script: |
          # Wait a bit more for services to fully start
          sleep 10
          
          # Test local health endpoint
          if curl -f http://localhost/api/health; then
            echo "✅ Local health check passed"
          else
            echo "❌ Local health check failed"
            exit 1
          fi
          
          # Test public endpoint (may take a moment for DNS/certs)
          echo "Testing public endpoint..."
          for i in {1..5}; do
            if curl -f https://breezeehr.ddrcode.me/api/health; then
              echo "✅ Public health check passed"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 10s..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Public health check failed after 5 attempts"
              exit 1
            fi
          done
          
          echo "🚀 All smoke tests passed!"